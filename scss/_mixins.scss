$ffTitle: "Formula Condensed";
$ffArial: Arial,
sans-serif;
$cLight: #FFF;
$cDark: #000;
$cIntro: #AEAEAE;
$cActu: #792B01;
$cHS: #EE7600;
$cStreet: #008962;
$cCrew: #DAB76B;
$cBrands: #7ABBB2;
$cPros: #F0357A;
$cPopup: #CF0000;
//  BASE
//////////////////////////////////////////////
$baseFontFamily: $ffArial;
$baseFontSize: 16px;
$baseLineHeight: 1.625;
$baseLetterSpacing: 0;
$baseBackgroundColor: #000;
$baseTextColor: $cLight;
$selectionBackgroundColor: #FFF;
$selectionColor: #0A0A0A;
$baseFontSizeMd: 14px;
$baseFontSizeXs: 13px;
//  RESPONSIVE
//////////////////////////////////////////////
$breakpoints: ( xs: ( min: 0px, max: 767px), sm: ( min: 768px, max: 899px), md: ( min: 900px, max: 1199px), lg: ( min: 1200px, max: 1499px), xl: ( min: 1500px));
//  CONTAINER
///////////////////////////////////////////////////////////
$containerWidth: 90vw;
$containerWidthSm: 96vw;
$containerPaddingXs: 55px;
//  GRID
//////////////////////////////////////////////
$gridColsNb: 14;
$gridColGutterX: 1.5vw;
$gridColGutterY: 1.5vh;
//  EASES
///////////////////////////////////////////////////////////
$easeOutQuint: cubic-bezier(0.23, 1, 0.32, 1);
$easeOutCirc: cubic-bezier(0.075, 0.82, 0.165, 1);
$easeOutExpo: cubic-bezier(0.19, 1, 0.22, 1);
$easeInOutExpo: cubic-bezier(0.8, 0, 0.2, 1);
// GSAP EASINGS
$Power0EaseNone: cubic-bezier(0.250, 0.250, 0.750, 0.750);
$Power1EaseIn: cubic-bezier(0.550, 0.085, 0.680, 0.530);
$Power1EaseOut: cubic-bezier(0.250, 0.460, 0.450, 0.940);
$Power1EaseInOut: cubic-bezier(0.455, 0.030, 0.515, 0.955);
$Power2EaseIn: cubic-bezier(0.550, 0.055, 0.675, 0.190);
$Power2EaseOut: cubic-bezier(0.215, 0.610, 0.355, 1.000);
$Power2EaseInOut: cubic-bezier(0.645, 0.045, 0.355, 1.000);
$Power3EaseIn: cubic-bezier(0.895, 0.030, 0.685, 0.220);
$Power3EaseOut: cubic-bezier(0.165, 0.840, 0.440, 1.000);
$Power3EaseInOut: cubic-bezier(0.770, 0.000, 0.175, 1.000);
$Power4EaseIn: cubic-bezier(0.755, 0.050, 0.855, 0.060);
$Power4EaseOut: cubic-bezier(0.230, 1.000, 0.320, 1.000);
$Power4EaseInOut: cubic-bezier(0.860, 0.000, 0.070, 1.000);
$CircEaseIn: cubic-bezier(0.600, 0.040, 0.980, 0.335);
$CircEaseOut: cubic-bezier(0.075, 0.820, 0.165, 1.000); // wip
$CircEaseInOut: cubic-bezier(0.785, 0.135, 0.150, 0.860); // wip
$ExpoEaseIn: cubic-bezier(0.950, 0.050, 0.795, 0.035);
$ExpoEaseOut: cubic-bezier(0.190, 1.000, 0.220, 1.000);
$ExpoEaseInOut: cubic-bezier(1.000, 0.000, 0.000, 1.000);
$SineEaseIn: cubic-bezier(0.470, 0.000, 0.745, 0.715);
$SineEaseOut: cubic-bezier(0.390, 0.575, 0.565, 1.000);
$SineEaseInOut: cubic-bezier(0.445, 0.050, 0.550, 0.950);
@mixin colBasic() {
    flex: 0 0 auto;
    padding: $gridColGutterY/2 $gridColGutterX/2;
}

@mixin makeGrid($breakpoint: '') {
    @if $breakpoint {
        $breakpoint: str-insert($breakpoint, '-', 0);
    }
    @else {
        $breakpoint: '';
    }
    .row--start#{$breakpoint} {
        justify-content: flex-start;
        text-align: start;
    }
    .row--center#{$breakpoint} {
        justify-content: center;
        text-align: center;
    }
    .row--end#{$breakpoint} {
        justify-content: flex-end;
        text-align: end;
    }
    .row--top#{$breakpoint} {
        align-items: flex-start;
    }
    .row--middle#{$breakpoint} {
        align-items: center;
    }
    .row--bottom#{$breakpoint} {
        align-items: flex-end;
    }
    .row--around#{$breakpoint} {
        justify-content: space-around;
    }
    .row--between#{$breakpoint} {
        justify-content: space-between;
    }
    .row--reverse#{$breakpoint} {
        flex-direction: row-reverse;
    }
    .col--first#{$breakpoint} {
        order: -1;
    }
    .col--last#{$breakpoint} {
        order: 1;
    }
    @if $breakpoint !='' {
        .col#{$breakpoint} {
            flex-grow: 1;
            flex-basis: 0;
            max-width: 100%;
            @include colBasic();
        }
    }
    .offset#{$breakpoint}-0 {
        margin-left: 0%;
    }
    @for $i from 1 through $gridColsNb {
        .col#{$breakpoint}-#{$i} {
            @include colBasic();
            max-width: percentage($i / $gridColsNb);
            flex: 0 0 percentage($i / $gridColsNb);
        }
        .offset#{$breakpoint}-#{$i} {
            margin-left: percentage($i / $gridColsNb);
        }
    }
}

@mixin respondTo($bkp) {
    $breakpoint: map-get($breakpoints, $bkp);
    $breakpointMin: map-get($breakpoint, min);
    $breakpointMax: map-get($breakpoint, max);
    @if type-of($breakpointMax)=='number' {
        @media (max-width: $breakpointMax) {
            @content;
        }
    }
    @else {
        @media (min-width: $breakpointMin) {
            @content;
        }
    }
}

// @mixin respondToPx($bkp) {
//     @media (max-width: $bkp*1px) {
//         @content;
//     }
// }
@mixin fontSize($fontSize, $lineHeight: null, $bfs: $baseFontSize) {
    font-size: ($fontSize/strip-unit($bfs)) + rem;
    @if $lineHeight {
        line-height: $lineHeight/$fontSize;
    }
    @else {
        line-height: $baseLineHeight;
    }
}

@function strip-unit($number) {
    @if type-of($number)=='number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

@function vwCol($col, $modifier: 0, $container: $containerWidth) {
    $oneColVw: (strip-unit($container) - (($gridColsNb - 1) * strip-unit($gridColGutterX))) / $gridColsNb;
    $c: (($oneColVw * $col) + (($col - 1) * strip-unit($gridColGutterX))) * 1vw + $modifier;
    @return #{$c};
}